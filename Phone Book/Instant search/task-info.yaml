type: edu
custom_name: stage4
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Matcher;\n\
    import java.util.regex.Pattern;\n\npublic class PhoneBookTest extends StageTest\
    \ {\n\n    private long timeOnTestStart;\n    \n    @Override\n    public List<TestCase>\
    \ generate() {\n        timeOnTestStart = System.currentTimeMillis();\n      \
    \  return Arrays.asList(\n            new TestCase().setTimeLimit(30 * 60 * 1000)\n\
    \        );\n    }\n    \n    \n    private CheckResult checkPhrases(String reply,\
    \ String... phrases) {\n        reply = reply.toLowerCase();\n        for (String\
    \ phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.wrong(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.wrong(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.wrong(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.wrong(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.wrong(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.wrong(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.correct();\n    }\n}\n"
  learner_created: false
- name: src/phonebook/PhoneNumber.java
  visible: true
  text: |
    package phonebook;

    public class PhoneNumber {
        private final int number;
        private final String name;

        public PhoneNumber(int number, String name) {
            this.number = number;
            this.name = name;
        }

        public int getNumber() {
            return number;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return this.name + " - " + this.number;
        }
    }
  learner_created: true
- name: src/phonebook/Searchers.java
  visible: true
  text: |
    package phonebook;

    import java.util.List;

    public class Searchers {

        public static Integer linearSearch(List<PhoneNumber> array, String value) {
            // Loop through all phone numbers in the array until the value is found
            for (PhoneNumber pn : array) {
                if (pn.getName().equals(value)) {
                    return pn.getNumber();
                }
            }
            // Return null if the value wasn't found
            return null;
        }

        public static Integer jumpSearch(List<PhoneNumber> array, String value) {
            if (array.size() == 0) {
                return -1;
            }

            int currentPos = 0;
            int previousPos = 0;
            int finalPos = array.size() - 1;
            int stepSize = ((int) Math.floor(Math.sqrt(array.size())));
            stepSize = (stepSize == 0) ? 1 : stepSize;

            while (array.get(currentPos).getName().compareTo(value) < 0) {
                if (currentPos == finalPos) {
                    return -1;
                }
                previousPos = currentPos;
                currentPos = Math.min(currentPos + stepSize, finalPos);
            }

            if (array.get(currentPos).getName().equals(value)) {
                return currentPos;
            }

            int result = jumpSearch(array.subList(previousPos, currentPos), value);
            return (result == -1) ? result : result + previousPos;
        }

        public static Integer binarySearch(List<PhoneNumber> array, String value) {
            // TODO: make this return null
            if (array.isEmpty()) {
                return 0;
            }

            int middleIndex = (array.size() - 1) / 2;
            // If the value at the current middle index is equal to the value we're searching for, return that index
            if (array.get(middleIndex).getName().equals(value)) {
                return middleIndex;
            }

            if (value.compareTo(array.get(middleIndex).getName()) > 0) {
                // Return the result of a recursive binary search on the right half of the array,
                // and add the middle index + 1 to the result
                return binarySearch(array.subList(middleIndex + 1, array.size()), value) + middleIndex + 1;
            } else {
                // Return the result of a recursive binary search on the left half of the array
                return binarySearch(array.subList(0, middleIndex), value);
            }
        }
    }
  learner_created: true
- name: src/phonebook/Sorters.java
  visible: true
  text: |
    package phonebook;

    import java.time.Instant;
    import java.util.ArrayList;
    import java.util.List;

    public class Sorters {

        public static List<PhoneNumber> bubbleSort(List<PhoneNumber> array, long startTime, Instant linearTimeTaken) {
            List<PhoneNumber> sortedArray = new ArrayList<>(array);

            // Keep track of the maximum index to check
            int maxIndex = sortedArray.size() - 1;
            boolean repeat = true;
            // Sorting will repeat until the whole array is sorted.
            while (repeat) {
                // Repeat will be kept false once the array is sorted
                repeat = false;
                // Loop through the whole array until the max index is reached
                for (int i = 0; i < maxIndex; i++) {
                    // If the current element is bigger than the next element, swap them
                    if (sortedArray.get(i).getName().compareTo(sortedArray.get(i + 1).getName()) > 0) {
                        // Array is not fully sorted yet, so set repeat back to true
                        repeat = true;
                        // If the current index + 1 is equal to the max index, decrease the max index by 1
                        if (i + 1 == maxIndex) {
                            maxIndex--;
                        }

                        // Swap the elements using a temp variable
                        PhoneNumber temp = sortedArray.get(i);
                        sortedArray.set(i, sortedArray.get(i + 1));
                        sortedArray.set(i + 1, temp);
                    }
                }

                if (Instant.ofEpochMilli(System.currentTimeMillis() - startTime)
                        .isAfter(Instant.ofEpochMilli(linearTimeTaken.toEpochMilli() * 10))) {
                    return new ArrayList<>();
                }
            }

            return sortedArray;
        }

        public static List<PhoneNumber> quickSort(List<PhoneNumber> array) {
            if (array.size() == 0) {
                return new ArrayList<>();
            }
            if (array.size() == 1) {
                return new ArrayList<>(array);
            }

            List<PhoneNumber> leftSubArray = new ArrayList<>();
            List<PhoneNumber> rightSubArray = new ArrayList<>();
            int pivot = getPivot(array);

            for (PhoneNumber pn : array) {
                if (!pn.equals(array.get(pivot))) {
                    if (array.get(pivot).getName().compareTo(pn.getName()) > 0) {
                        leftSubArray.add(pn);
                    } else {
                        rightSubArray.add(pn);
                    }
                }
            }

            ArrayList<PhoneNumber> sortedArray = new ArrayList<>(quickSort(leftSubArray));
            sortedArray.add(array.get(pivot));
            sortedArray.addAll(quickSort(rightSubArray));

            return sortedArray;
        }

        private static int getPivot(List<PhoneNumber> array) {
            String first = array.get(0).getName();
            String middle = array.get((array.size() - 1) / 2).getName();
            String last = array.get(array.size() - 1).getName();

            if (first.compareTo(middle) >= 0 && first.compareTo(last) >= 0) {
                return (middle.compareTo(last) >= 0) ? (array.size() - 1) / 2 : array.size() - 1;
            } else if (middle.compareTo(first) >= 0 && middle.compareTo(last) >= 0) {
                return (first.compareTo(last) >= 0) ? 0 : array.size() - 1;
            } else if (last.compareTo(first) >= 0 && last.compareTo(middle) >= 0) {
                return (first.compareTo(middle) >= 0) ? 0 / 2 : (array.size() - 1) / 2;
            }
            return array.size() - 1;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7721#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 30 Aug 2022 18:48:59 UTC
record: -1
